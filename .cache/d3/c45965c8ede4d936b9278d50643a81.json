{"id":"src/components/CodeFlask.svelte","dependencies":[{"name":"/home/novacbn/workspace/novacbn/svelte-luda/package.json","includedInParent":true,"mtime":1574882880732},{"name":"/home/novacbn/workspace/novacbn/svelte-luda/.browserslistrc","includedInParent":true,"mtime":1574439497548},{"name":"svelte/internal","loc":{"line":15,"column":7},"parent":"/home/novacbn/workspace/novacbn/svelte-luda/docs/src/components/CodeFlask.svelte","resolved":"/home/novacbn/workspace/novacbn/svelte-luda/node_modules/svelte/internal/index.mjs"},{"name":"codeflask","loc":{"line":17,"column":22},"parent":"/home/novacbn/workspace/novacbn/svelte-luda/docs/src/components/CodeFlask.svelte","resolved":"/home/novacbn/workspace/novacbn/svelte-luda/node_modules/codeflask/build/codeflask.module.js"},{"name":"_css_loader","parent":"/home/novacbn/workspace/novacbn/svelte-luda/docs/src/components/CodeFlask.svelte","resolved":"/home/novacbn/workspace/novacbn/svelte-luda/node_modules/parcel-bundler/src/builtins/css-loader.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _internal = require(\"svelte/internal\");\n\nvar _codeflask = _interopRequireDefault(require(\"codeflask\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* src/components/CodeFlask.svelte generated by Svelte v3.15.0 */\nconst file = \"src/components/CodeFlask.svelte\";\n\nfunction add_css() {\n  var style = (0, _internal.element)(\"style\");\n  style.id = \"svelte-16nykd7-style\";\n  style.textContent = \".codeflask__code{background-color:inherit;color:inherit;line-height:inherit}\\n\";\n  (0, _internal.append_dev)(document.head, style);\n}\n\nfunction create_fragment(ctx) {\n  let div;\n  const block = {\n    c: function create() {\n      div = (0, _internal.element)(\"div\");\n      (0, _internal.attr_dev)(div, \"class\", ctx._class);\n      (0, _internal.attr_dev)(div, \"style\", ctx.style);\n      (0, _internal.add_location)(div, file, 40, 0, 852);\n    },\n    l: function claim(nodes) {\n      throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div, anchor);\n      ctx.div_binding(div);\n    },\n    p: function update(changed, ctx) {\n      if (changed._class) {\n        (0, _internal.attr_dev)(div, \"class\", ctx._class);\n      }\n\n      if (changed.style) {\n        (0, _internal.attr_dev)(div, \"style\", ctx.style);\n      }\n    },\n    i: _internal.noop,\n    o: _internal.noop,\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div);\n      ctx.div_binding(null);\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx\n  });\n  return block;\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n  let {\n    class: _class = \"\"\n  } = $$props;\n  let {\n    style = \"\"\n  } = $$props;\n  let {\n    language = \"html\"\n  } = $$props;\n  let {\n    line_numbers = true\n  } = $$props;\n  let {\n    readonly = false\n  } = $$props;\n  let {\n    rtl = false\n  } = $$props;\n  let {\n    value = \"\"\n  } = $$props;\n  let editor_element;\n  let flask;\n  const writable_props = [\"class\", \"style\", \"language\", \"line_numbers\", \"readonly\", \"rtl\", \"value\"];\n  Object.keys($$props).forEach(key => {\n    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== \"$$\") console.warn(\"<CodeFlask> was created with unknown prop '\".concat(key, \"'\"));\n  });\n\n  function div_binding($$value) {\n    _internal.binding_callbacks[$$value ? \"unshift\" : \"push\"](() => {\n      $$invalidate(\"editor_element\", editor_element = $$value);\n    });\n  }\n\n  $$self.$set = $$props => {\n    if (\"class\" in $$props) $$invalidate(\"_class\", _class = $$props.class);\n    if (\"style\" in $$props) $$invalidate(\"style\", style = $$props.style);\n    if (\"language\" in $$props) $$invalidate(\"language\", language = $$props.language);\n    if (\"line_numbers\" in $$props) $$invalidate(\"line_numbers\", line_numbers = $$props.line_numbers);\n    if (\"readonly\" in $$props) $$invalidate(\"readonly\", readonly = $$props.readonly);\n    if (\"rtl\" in $$props) $$invalidate(\"rtl\", rtl = $$props.rtl);\n    if (\"value\" in $$props) $$invalidate(\"value\", value = $$props.value);\n  };\n\n  $$self.$capture_state = () => {\n    return {\n      _class,\n      style,\n      language,\n      line_numbers,\n      readonly,\n      rtl,\n      value,\n      editor_element,\n      flask,\n      options\n    };\n  };\n\n  $$self.$inject_state = $$props => {\n    if (\"_class\" in $$props) $$invalidate(\"_class\", _class = $$props._class);\n    if (\"style\" in $$props) $$invalidate(\"style\", style = $$props.style);\n    if (\"language\" in $$props) $$invalidate(\"language\", language = $$props.language);\n    if (\"line_numbers\" in $$props) $$invalidate(\"line_numbers\", line_numbers = $$props.line_numbers);\n    if (\"readonly\" in $$props) $$invalidate(\"readonly\", readonly = $$props.readonly);\n    if (\"rtl\" in $$props) $$invalidate(\"rtl\", rtl = $$props.rtl);\n    if (\"value\" in $$props) $$invalidate(\"value\", value = $$props.value);\n    if (\"editor_element\" in $$props) $$invalidate(\"editor_element\", editor_element = $$props.editor_element);\n    if (\"flask\" in $$props) $$invalidate(\"flask\", flask = $$props.flask);\n    if (\"options\" in $$props) $$invalidate(\"options\", options = $$props.options);\n  };\n\n  let options;\n\n  $$self.$$.update = (changed = {\n    language: 1,\n    readonly: 1,\n    rtl: 1,\n    line_numbers: 1,\n    flask: 1,\n    editor_element: 1,\n    options: 1,\n    value: 1\n  }) => {\n    if (changed.language || changed.readonly || changed.rtl || changed.line_numbers) {\n      $: $$invalidate(\"options\", options = {\n        language,\n        readonly,\n        rtl,\n        lineNumbers: line_numbers\n      });\n    }\n\n    if (changed.flask || changed.editor_element || changed.options) {\n      $: {\n        if (flask) {}\n\n        if (editor_element) {\n          $$invalidate(\"flask\", flask = new _codeflask.default(editor_element, options));\n        }\n      }\n    }\n\n    if (changed.flask) {\n      $: if (flask) flask.onUpdate(code => $$invalidate(\"value\", value = code));\n    }\n\n    if (changed.flask || changed.value) {\n      $: if (flask) flask.updateCode(value);\n    }\n  };\n\n  return {\n    _class,\n    style,\n    language,\n    line_numbers,\n    readonly,\n    rtl,\n    value,\n    editor_element,\n    div_binding\n  };\n}\n\nclass CodeFlask_1 extends _internal.SvelteComponentDev {\n  constructor(options) {\n    super(options);\n    if (!document.getElementById(\"svelte-16nykd7-style\")) add_css();\n    (0, _internal.init)(this, options, instance, create_fragment, _internal.safe_not_equal, {\n      class: \"_class\",\n      style: 0,\n      language: 0,\n      line_numbers: 0,\n      readonly: 0,\n      rtl: 0,\n      value: 0\n    });\n    (0, _internal.dispatch_dev)(\"SvelteRegisterComponent\", {\n      component: this,\n      tagName: \"CodeFlask_1\",\n      options,\n      id: create_fragment.name\n    });\n  }\n\n  get class() {\n    throw new Error(\"<CodeFlask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set class(value) {\n    throw new Error(\"<CodeFlask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  get style() {\n    throw new Error(\"<CodeFlask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set style(value) {\n    throw new Error(\"<CodeFlask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  get language() {\n    throw new Error(\"<CodeFlask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set language(value) {\n    throw new Error(\"<CodeFlask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  get line_numbers() {\n    throw new Error(\"<CodeFlask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set line_numbers(value) {\n    throw new Error(\"<CodeFlask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  get readonly() {\n    throw new Error(\"<CodeFlask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set readonly(value) {\n    throw new Error(\"<CodeFlask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  get rtl() {\n    throw new Error(\"<CodeFlask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set rtl(value) {\n    throw new Error(\"<CodeFlask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  get value() {\n    throw new Error(\"<CodeFlask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set value(value) {\n    throw new Error(\"<CodeFlask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n}\n\nvar _default = CodeFlask_1;\nexports.default = _default;","css":".codeflask__code{background-color:inherit;color:inherit;line-height:inherit}"},"sourceMaps":{"js":{"mappings":[{"source":"CodeFlask.svelte","name":null,"original":{"line":34,"column":12},"generated":{"line":14,"column":0}}],"sources":{"CodeFlask.svelte":"<script>\n    import CodeFlask from \"codeflask\";\n\n    let _class = \"\";\n    export let style = \"\";\n\n    export let language = \"html\";\n    export let line_numbers = true;\n    export let readonly = false;\n    export let rtl = false;\n    export let value = \"\";\n\n    export {_class as class};\n\n    let editor_element;\n    let flask;\n\n    $: options = {language, readonly, rtl, lineNumbers: line_numbers};\n    $: if (flask) flask.onUpdate((code) => (value = code));\n    $: if (flask) flask.updateCode(value);\n\n    $: {\n        if (flask) {\n            // TODO: REMOVE PREVIOUS INSTANCE\n        }\n\n        if (editor_element) {\n            flask = new CodeFlask(editor_element, options);\n        }\n    }\n</script>\n\n<style>\n    :global(.codeflask__code) {\n        background-color: inherit;\n        color: inherit;\n        line-height: inherit;\n    }\n</style>\n\n<div class={_class} {style} bind:this={editor_element} />\n"},"lineCount":null}},"error":null,"hash":"1501c12d01c69781525e3f5d2e8780b6","cacheData":{"env":{}}}